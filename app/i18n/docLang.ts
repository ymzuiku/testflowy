export const docLang = {
  安装: "安装",
  为什么使用Testflowy: "为什么使用Testflowy?",
  Testflowy是什么: "Testflowy 是什么?",
  Testflowy励志成为一个最简单的Web自动化测试平台:
    "Testflowy 励志成为一个最简单的Web自动化测试平台, 它能够帮助前端工程师和测试工程师进行行为操作录制, 并且通过团队账号共享测试行为, 方便团队中任何成员快速方便的回归自动化测试.",
  Testflowy对比传统的手动编写测试: "Testflowy对比传统的手动编写(集成)测试",
  对于手动编写集成测试代码一直有以下困难点: "对于手动编写集成测试代码, 一直有以下困难点",
  如何快速培训工程师学习编写自动化测试代码: "如何快速培训工程师学习编写自动化测试代码?",
  如何降低集成测试代码编写的成本: "如何降低集成测试代码编写的成本?",
  如何让自动化测试更好的在整个团队进行协作: "如何让自动化测试更好的在整个团队进行协作?",
  为了更好的在整个团队进行协作您需要搭建一套自动化测试平台这大概需要个资深的测试工程师花费数十天的工作量:
    "为了更好的在整个团队进行协作, 您需要搭建一套自动化测试平台, 这大概需要1-2个资深的测试工程师花费数十天的工作量",
  使用Testflowy您很轻松的解决了以上问题: "使用Testflowy, 您很轻松的解决了以上问题",
  工程师不需要编写测试代码: "工程师不需要编写测试代码",
  更简单的聚合复制Mock您的测试任务: "更简单的聚合、复制、Mock您的测试任务",
  通过Testflowy团队账号体系让自动化测试在整个团队进行协作: "通过Testflowy团队账号体系, 让自动化测试在整个团队进行协作",
  Testflowy的优点: "Testflowy 的优点",
  使用Testflowy您只需要注册就获得了一套自动化测试平台工程师和测试人员不需要编写任何代码:
    "使用Testflowy, 您只需要注册就获得了一套自动化测试平台, 工程师和测试人员不需要编写任何代码, Testflowy 会帮助您录制行为, 并且共享给整个团队, 让他们复用您的测试, 这一切都在真实Web环境进行, 不需要额外搭建任何虚拟环境.",
  Testflowy的缺点: "Testflowy 的缺点",
  Testflowy基于真实浏览器环境它的特点是没有搭建成本:
    "Testflowy 基于真实浏览器环境, 它的特点是没有搭建成本, 并且和真实的业务场景更贴切. 缺点是仅支持浏览器平台, 并且对于复杂行为的模拟较差, 对于涉及外部站点授权的行为能力较差(比如支付、跨平台授权等). 涉及跨外部站点的行为, 您需要需要使用手动测试",
  注册平台账号: "注册平台账号",
  开始使用Testflowy您需要注册一个账号在官网首页或者点击以下链接即可跳转到注册页面:
    "开始使用 Testflowy, 您需要注册一个账号, 在官网首页, 或者点击以下链接, 即可跳转到注册页面",
  点我进行注册: "点我进行注册",
  填写邮箱然后点击注册: "1. 填写邮箱, 然后点击注册",
  填写邮箱收到的验证码设定密码: "2. 填写邮箱收到的验证码, 设定密码",
  注册成功自动登录到Dashboard: "3. 注册成功, 自动登录到 Dashboard",
  您已注册好账号可以继续下一步了: "您已注册好账号, 可以继续下一步了",
  启用测试: "启用测试",
  嵌入TestflowySDK: "嵌入 Testflowy SDK",
  Testflowy提供了种方案启用测试您可以选择以下任意一种方案:
    "Testflowy 提供了 2 种方案启用测试, 您可以选择以下任意一种方案",
  在测试网站中嵌入代码: "在测试网站中嵌入代码 (推荐)",
  安装TestflowyChrome插件: "安装 Testflowy Chrome 插件",
  方案在测试网站中嵌入代码: "方案1. 在测试网站中嵌入代码(推荐)",
  直接在测试网站中嵌入SDK可以很好让团队任何成员都参与测试我们建议您优先使用这种方式:
    "直接在测试网站中嵌入SDK, 可以很好让团队任何成员都参与测试, 我们建议您优先使用这种方式 (建议仅在测试环境添加):",
  在HTML中嵌入以下代码: "在HTML中嵌入以下代码",

  方案Chrome浏览器安装Tampermonkey插件: "方案2. Chrome 浏览器安装 Tampermonkey 插件",
  使用Chrome浏览器的Testflowy插件可以自动的帮助我们对网站嵌入TestflowySDK:
    "使用 Chrome 浏览器的 Tampermonkey 插件可以自动的帮助我们对网站嵌入 Testflowy SDK, 这可以不需要前端工程师配合在测试网站上添加SDK, 缺点是其他人员如果也要参与测试, 那么他们也需要安装此插件",
  具体安装步骤可以查看以下视频: "具体安装步骤可以查看以下视频:",
  点击安装Tampermonkey插件: "点击安装 Tampermonkey 插件",
  在Tampermonkey插件中添加以下代码: "在 Tampermonkey 插件中添加以下代码",
  启用TestflowySDK: "启用 Testflowy SDK",
  确保已在测试网站中嵌入了TestflowySDK我们在测试网页中按:
    "确保已在测试网站中嵌入了 Testflowy SDK, 我们在测试网页中按 F5 或 Shift+F5, 我们就可以看到 Testflowy SDK 已经启用, 如下图中黑色的 Testflowy SDK 按钮",
  点击Testflowy按钮可以看到TestflowySDK登录界面: "点击 Testflowy 按钮, 可以看到 Testflowy SDK 登录界面",
  输入您之前注册的账号或者团队成员的账号即可开始测试: "输入您之前注册的账号, 或者团队成员的账号, 即可开始测试",
  如果需要隐藏TestflowySDK我们在网页中再次按: "如果需要隐藏 Testflowy SDK, 我们在网页中再次按 F5 或 Shift+F5即可",
  自动化测试: "自动化测试",
  录制执行: "录制 / 执行",
  录制: "录制",
  执行: "执行",
  在TestflowySDK登录后可以看到一个空列表点击右上角的号可以创建一条测试任务:
    "在 Testflowy SDK 登录后, 可以看到一个空列表, 点击右上角的 + 号, 可以创建一条测试任务",
  我们可以点击某一条测试任务右侧的播放按钮如下图红色标记: "我们可以点击某一条测试任务右侧的播放按钮, 如下图红色标记",
  此时页面会焦距这条测试任务我们可以看到此条测试任务的Steps为因为新建的测试任务内容是空的:
    "此时页面会焦距这条测试任务, 我们可以看到, 此条测试任务的 Steps 为 0, 因为新建的测试任务内容是空的",
  点击绿色圆形的录制按钮我们开始录制具体的测试步骤: "点击绿色圆形的录制按钮, 我们开始录制具体的测试步骤",
  接下来我们只需要正常的交互页面TestflowySDK就可以帮我们录制行为录制后点击保存录制的内容即可保存在个人的测试列表中如下面视频:
    "接下来我们只需要正常的交互页面, Testflowy SDK 就可以帮我们录制行为, 录制后点击保存, 录制的内容即可保存在个人的测试列表中, 如下面视频:",
  点击红色方块进行停止录制然后点击蓝色的播放按钮即可执行当前测试如下面视频:
    "点击红色方块进行停止录制, 然后点击蓝色的播放按钮, 即可执行当前测试, 如下面视频",
  聚合测试: "聚合测试",
  创建聚合测试: "创建聚合测试",
  视频内容: "视频内容",
  接下来我们尝试复制一个测试分支调整测试内容然后聚合执行测试如下面视频:
    "接下来我们尝试复制一个测试分支, 调整测试内容, 然后聚合执行测试, 如下面视频",
  根据视频中的内容我们可以看到: "根据视频中的内容, 我们可以看到:",
  我们复制了一个测试任务: "我们复制了一个测试任务",
  双击测试名称进行了名称的编辑: "双击测试名称进行了名称的编辑",
  重新播放了该测试: "重新播放了该测试",
  当该测试执行成功后我们在该测试的基础上添加了一些额外的内容:
    "当该测试执行成功后, 我们在该测试的基础上, 添加了一些额外的内容",
  我们同时勾选两个测试并且执行测试: "我们同时勾选两个测试, 并且执行测试",
  当测试执行成功测试列表中的测试任务标记了PASS的标签: "当测试执行成功, 测试列表中的测试任务, 标记了 PASS 的标签",
  Mock数据: "Mock 数据",
  在测试任务中我们常常需要使用随机邮箱随机密码并且在后续的输入行为中重复使用当前的随机文本这对于账号注册表单填写非常有用:
    "在测试任务中, 我们常常需要使用随机邮箱、随机密码, 并且在后续的输入行为中重复使用当前的随机文本, 这对于账号注册、 表单填写非常有用",
  使用随机邮箱: "使用随机邮箱",
  当我们在录制测试时并且在文本中输入时Testflowy会自动帮我们生成一个随机邮箱文本:
    "当我们在录制测试时, 并且在文本中输入 $email$ 时, Testflowy 会自动帮我们生成一个随机邮箱文本, 并且在后续的测试执行中会使用每次不一样的随机值",
  所有Mock关键字: "所有 Mock 关键字",
  随机邮箱: "随机邮箱",
  随机手机: "随机手机",
  随机密码: "随机密码",
  随机ID: "随机 ID",
  随机文本长度: "随机文本长度",
  随机数字小于: "随机数字小于",
  随机验证码长度: "随机验证码长度",
  调整TestflowySDK的样式: "调整 Testflowy SDK 的样式",
  调整改变Testflowy的默认位置: "调整改变 Testflowy 的默认位置",
  Testflowy致敬iPhone的灵动岛所以默认的位置在顶部正中央但我们可以在面板缩小后进行拖动调节到其他指定位置如下视频:
    "Testflowy 致敬 iPhone 的灵动岛, 所以默认的位置在顶部正中央, 但我们可以在面板缩小后, 进行拖动调节到其他指定位置, 如下视频:",
  调整Testflowy的主题: "调整 Testflowy 的主题",
  Testflowy有暗色和亮色两个主题也是因为致敬灵动岛默认主题是暗色的您可以在设置中切换:
    "Testflowy 有暗色和亮色两个主题, 也是因为致敬灵动岛, 默认主题是暗色的, 您可以在设置中切换",
  提高测试的健壮性: "提高测试的健壮性",
  自动计算元素定位: "自动计算元素定位",
  使用ID提高健壮性: "使用 ID 提高健壮性",
  Testflowy录制时会根据元素在页面中的层级和属性进行定位元素在后续的测试回归中如果页面产生变动那么测试会失败因为找不到原有的元素了:
    "Testflowy 录制时, 会根据元素在页面中的层级和属性进行定位元素, 在后续的测试回归中, 如果页面产生变动, 那么测试会失败, 因为找不到原有的元素了.",
  这种失败是正确的因为页面的确已经改变了并且在大部分测试工具中都是保持这种逻辑但是在实际工作中我们会经常因为页面的微小改动导致关键测试步骤的失败这种情况会导致我们需要反复录制新的测试降低了每次测试录制的收益:
    "这种失败是正确的, 因为页面的确已经改变了, 并且在大部分测试工具中都是保持这种逻辑. 但是在实际工作中, 我们会经常因为页面的微小改动导致关键测试步骤的失败, 这种情况会导致我们需要反复录制新的测试, 降低了每次测试录制的收益",
  最好的解决方案是开发人员在编写页面的时候给必要录制动作的元素添加id或的标签属性这样Testflowy会优先使用这两个确定的属性进行元素定位后续即便页面的层级做了一些调整只要业务逻辑不变也能最大化的保障测试的健壮性:
    "最好的解决方案, 是开发人员在编写页面的时候, 给必要录制动作的元素添加 id 或 data-testid 的标签属性, 这样 Testflowy 会优先使用这两个确定的属性进行元素定位. 后续即便页面的层级做了一些调整, 只要业务逻辑不变, 也能最大化的保障测试的健壮性.",
  当我们录制时如果操作的元素有id或datatestid录制面板右侧会有一个绿色的安全图标:
    "当我们录制时, 如果操作的元素有id或 data-testid, 录制面板右侧会有一个绿色的安全图标",
  当我们录制时如果操作的元素没有相关id录制面板的安全图标呈现灰色这表示这个录制行为后期因为布局改动导致测试失败的概率较高:
    "当我们录制时, 如果操作的元素没有相关id, 录制面板的安全图标呈现灰色, 这表示这个录制行为后期因为布局改动导致测试失败的概率较高",
  Testflowy默认的元素定位逻辑是取决于元素层级和元素属性元素类型和元素的文本内容样式无关所以如果仅仅是调整文案CSS样式并不会打破原有的测试:
    "Testflowy 默认的元素定位逻辑是取决于元素层级和元素属性、元素类型, 和元素的文本内容、样式无关, 所以如果仅仅是调整文案、CSS样式, 并不会打破原有的测试",
  本地加密: "本地加密",
  本地加密原理: "本地加密原理",
  Testflowy承诺不会浏览任何用户的测试数据于此同时我们也不鼓励用户在正式环境使用Testflowy:
    "Testflowy 承诺不会浏览任何用户的测试数据, 于此同时, 我们也不鼓励用户在正式环境使用 Testflowy. 理论上您的测试用例应该都是非正式的数据内容, 这对您是最安全的保障.",
  大部分情况下您的测试数据应该无关机密但是若您希望把安全措施再提高一个级别我们建议您可以使用本地加密:
    "大部分情况下, 您的测试数据应该无关机密. 但是, 若您希望把安全措施再提高一个级别, 我们建议您可以使用本地加密. 本地加密的原理是您设定一个本地密钥, 此密钥不会以任何方式提交到 Testflowy. 如果您设置了本地密钥, 在保存测试数据时, 我们会把您的测试数据在您本地机器进行加密再传输. 当您准备执行测试时, 也会在您的本地机器进行解密. 这可以极大的保护您的测试数据.",
  经过加密的数据即便是团队成员使用也需要获得您的本地密钥建议您通过安全的途径将密钥分发给您的团队成员:
    "经过加密的数据, 即便是团队成员使用也需要获得您的本地密钥, 建议您通过安全的途径将密钥分发给您的团队成员, Testflowy 不会存储密钥, 所以也无法通过 Testflowy 进行共享密钥:",
  已加密的测试和未加密测试可以混合使用只有当您设定了本地密钥并保存时该用例才会被加密存储不影响其他未加密测试:
    "已加密的测试和未加密测试可以混合使用, 只有当您设定了本地密钥并保存时, 该用例才会被加密存储. 不影响其他未加密测试, 我们甚至可以选择多个加密测试和未加密测试进行聚合测试.",
  设置本地密钥: "设置本地密钥",
  我们在TestflowySDK中点击设置面板输入您的本地密钥:
    "我们在Testflowy SDK 中, 点击设置面板, 输入您的本地密钥, 长度没有限制, 建议您使用16位以上复杂密钥",
  设置了本地密钥之后我们再次保存一个测试能看到该测试有一个加密的图标:
    "设置了本地密钥之后, 我们再次保存一个测试, 能看到该测试有一个加密的图标:",
  团队协作: "团队协作",
  邀请成员: "邀请成员",
  我们已经共享了测试但是团队中还未有其他成员现在我们邀请其他工程师加入团队:
    "我们已经共享了测试, 但是团队中还未有其他成员, 现在我们邀请其他工程师加入团队",
  在控制台输入邀请成员的邮箱: "1. 在控制台输入邀请成员的邮箱",
  该成员在邮件中点开邀请链接: "2. 该成员在邮件中点开邀请链接",
  下图是您可能收到的邮件例子: "下图是您可能收到的邮件例子",
  该成员在链接中填写信息完成注册: "3. 该成员在链接中填写信息完成注册 (已注册的账号只需要确认即可)",
  成员完成邮件中的确认后管理员能看到多了一个成员信息: "4. 成员完成邮件中的确认后, 管理员能看到多了一个成员信息",
  给新成员授权License: "5. 给新成员授权 License",
  新成员默认是没有License的您需要授权一个License给他他才能够有权利使用团队协作相关的功能不用担心每个新注册的管理员账号都会赠送License您可以很好的试用后再决定是否长期续费License:
    "新成员默认是没有 License 的, 您需要授权一个 License 给他, 他才能够有权利使用团队协作相关的功能, 不用担心, 每个新注册的管理员账号都会赠送 10 个 License, 您可以很好的试用后再决定是否长期续费 License",
  如果这个员工离开团队了License可以随时更换给其他成员: "如果这个员工离开团队了, License 可以随时更换给其他成员",
  管理成员: "管理成员",
  成员权限: "成员权限",
  成员权限分为两类admin和agent其中admin拥有共享测试的新增浏览删除的权利agent不拥有删除的权利:
    "成员权限分为两类: admin 和 agent, 其中 admin 拥有共享测试的新增、浏览、删除的权利, agent 不拥有删除的权利",
  移除成员: "移除成员",
  点击成员邮件地址左侧的删除按钮在弹框中点击确认即可移除该成员:
    "点击成员邮件地址左侧的删除按钮, 在弹框中点击确认, 即可移除该成员",
  将测试共享到团队: "将测试共享到团队",
  您已经完成了一些测试工作最好的实践就是把您的测试工作共享给团队这样其他团队成员就可以反复使用您的测试用例助力其他成员的开发效率同时您也可以从他人共享的测试复制到个人测试列表中进行调整以完成您的新测试任务:
    "您已经完成了一些测试工作, 最好的实践就是把您的测试工作共享给团队, 这样其他团队成员就可以反复使用您的测试用例, 助力其他成员的开发效率. 同时, 您也可以从他人共享的测试复制到个人测试列表中进行调整, 以完成您的新测试任务.",
  共享测试: "共享测试",
  点击测试任务中右侧的云朵图标将测试共享到团队: "点击测试任务中右侧的云朵图标, 将测试共享到团队",
  查看共享的测试: "查看共享的测试",
  点击顶部的组织菜单其他成员可以看到组织测试列表中有了刚刚共享的测试:
    "点击顶部的组织菜单, 其他成员可以看到组织测试列表中有了刚刚共享的测试",
  直接在控制台执行测试: "直接在控制台执行测试",
  在控制台中也可以看到共享的测试我们可以在这里随时执行测试或者统一回归测试:
    "在控制台中, 也可以看到共享的测试, 我们可以在这里随时执行测试, 或者统一回归测试",
  License管理: "License管理",
  延续License: "延续 License",
  管理员注册账号就会赠送个License每个赠送的License拥有天的试用时长:
    "管理员注册账号就会赠送 10 个 License, 每个赠送的 License 拥有14天的试用时长",
  如果我们的License过期相关的员工账号就无法使用团队共享功能这时候我们可以续费License时长:
    "如果我们的 License 过期, 相关的员工账号就无法使用团队共享功能, 这时候我们可以续费 License 时长",
  选择要续费的License: "选择要续费的 License",
  我们先勾选需要续费的License然后点右上角的续费按钮: "我们先勾选需要续费的License, 然后点右上角的续费按钮",
  选择支付方式和续费时长: "选择支付方式和续费时长",
  支付成功相应的License即可延续时长: "支付成功, 相应的 License 即可延续时长",
  购买License: "购买License",
  如果我们团队成员超过当前的License我们可以购买新的License购买新的相同时长的License和续费的价格是一样的:
    "如果我们团队成员超过当前的 License, 我们可以购买新的 License, 购买新的相同时长的 License 和续费的价格是一样的.",
  开始购买License: "开始购买 License",
  我们点击购买License面板然后点击底部的购买按钮: "我们点击购买 License 面板, 然后点击底部的购买按钮",
  填写购买信息: "填写购买信息",
  我们选择支付方式购买时长购买License个数然后点击支付即可:
    "我们选择支付方式、购买时长、购买 License 个数, 然后点击支付即可",
  支付成功我们获得新的License: "支付成功, 我们获得新的 License",
  更换成员License: "更换成员 License",
  License调整: "License调整",
  我们会遇到一些团队成员离开的情况这时候可以将License更换给新加入的成员:
    "我们会遇到一些团队成员离开的情况, 这时候可以将 License 更换给新加入的成员.",
  团队成员的License可以随时更换同一个License只能给到个团队成员:
    "团队成员的 License 可以随时更换, 同一个 License 只能给到 1 个团队成员",
  如果点击Licensenotset可以移除某个成员的License: "如果点击 License not set, 可以移除某个成员的 License",
  常见问题: "常见问题",
  验证码扫脸支付等场景怎么办: "验证码、扫脸、支付等场景怎么办",
  首先我们要明确一点覆盖所有真实场景的测试是很困难的而且是低收益的在涉及第三方的场景下我们建议使用人工测试这类场景人工测试往往比自动化测试的收益更高:
    "首先我们要明确一点, 100%覆盖所有真实场景的测试是很困难的, 而且是低收益的, 在涉及第三方的场景下, 我们建议使用人工测试, 这类场景人工测试往往比自动化测试的收益更高.",
  在这类场景中我们建议在测试环境的项目进行规避因为这类场景它非常固定而且每次测试还可能需要支付成本不适合测试这种高频反复执行的场景但是他们又是整个项目流程中的一环很容易阻碍自动化测试的执行:
    "在这类场景中, 我们建议在测试环境的项目进行规避, 因为这类场景它非常固定, 而且每次测试还可能需要支付成本, 不适合测试这种高频、反复执行的场景, 但是他们又是整个项目流程中的一环, 很容易阻碍自动化测试的执行",
  我们建议这类流程进行人工测试而在自动化测试环境应该想法规避:
    "我们建议这类流程进行人工测试, 而在自动化测试环境应该想法规避",
  以下为Testflowy的建议仅做参考: "以下为 Testflowy 的建议, 仅做参考",
  验证码如果是测试环境约定一个固定验证码并且服务端不真正发送发验证码:
    "验证码: 如果是测试环境, 约定一个固定验证码, 并且服务端不真正发送发验证码",
  扫脸如果是测试环境在扫脸的页面增加一个跳过的按钮: "扫脸: 如果是测试环境, 在扫脸的页面增加一个跳过的按钮",
  支付支付往往是异步的如果是测试环境点击支付后前端直接跳到验证支付成功的页面而服务端直接跳过第三方支付的逻辑:
    "支付: 支付往往是异步的, 如果是测试环境, 点击支付后前端直接跳到验证支付成功的页面, 而服务端直接跳过第三方支付的逻辑",
  第三方登录在业务逻辑上确保第三方登录和普通账号登是一样的逻辑在自动测试环境仅做普通账号的测试流程:
    "第三方登录: 在业务逻辑上确保第三方登录和普通账号登是一样的逻辑, 在自动测试环境仅做普通账号的测试流程",
  测试覆盖就像下围棋把可测部分和外部耦合的部分圈起来分隔好需要人工测试的范围可以自动化测试的范围让自动化测试帮我们降低人工测试的范围即可:
    "测试覆盖就像下围棋, 把可测部分和外部耦合的部分圈起来, 分隔好需要人工测试的范围、可以自动化测试的范围, 让自动化测试帮我们降低人工测试的范围即可.",
  Testflowy测试记录中的ID是什么: "Testflowy测试记录中的ID是什么?",
  如果我们尝试手动编辑测试内容我们能看到每个测试动作都有一个id属性它其实是Testflowy根据元素的:
    "如果我们尝试手动编辑测试内容, 我们能看到每个测试动作都有一个 id 属性, 它其实是 Testflowy 根据元素的 id、test-id、上下文层级、元素关键属性、元素类型而自动生成的元素属性. 之所以不用更为明文的方式, 是因为测试动作会存储在 Testflowy 的服务器中, 任何企业都不希望暴露自己的页面信息给到 Testflowy. Testflowy 也不希望无意收集到元素信息, 所以以这种方式记录元素的位置.",
  这有一个小细节如果id中带号表示这个id是使用元素id:
    "这有一个小细节, 如果 id 中带 * 号, 表示这个 id 是使用 元素 id 或 元素 test-id 生成, 这个元素在后续的迭代中, 能重新找到的概率比自动推断来的高.",
  与此同时我们强烈建议您只将TestflowySDK嵌入在您的测试环境:
    "与此同时, 我们强烈建议您只将 Testflowy SDK 嵌入在您的测试环境.",
  Testflowy的图片有时候为什么会变成其他图片: "Testflowy 的图片有时候为什么会变成其他图片",
  Testflowy为了保证测试的效率如果您选择的文件资源过大Testflowy会使用预设文件代替您的测试文件如果要保证文件内容不被变更请使用小尺寸的文件:
    "Testflowy 为了保证测试的效率, 如果您选择的文件资源过大, Testflowy 会使用预设文件代替您的测试文件, 如果要保证文件内容不被变更, 请使用小尺寸的文件",
  测试等待: "测试等待",
  点击任何一个用例的编辑按钮都即可编辑测试文件: "点击任何一个用例的编辑按钮, 即可编辑测试文件",
  添加等待时间: "添加等待时间",
  如下图添加可以添加等待时间: "如下图添加可以添加等待时间, wait: 5 表示该步骤执行时, 预先等待 5 秒",
};
